# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches: 
    include:
    - master
    - development
  paths:
    exclude:
    - README.md
    - .gitignore

pr:
- master

variables:
  solutionPath: ClassRegistration

jobs:
- job: build_linux
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'ar-dk-ps-sonarcloud'
      organization: '2006-jun15-net'
      scannerMode: 'MSBuild'
      projectKey: '2006-jun15-net_ar-dk-ps-project2'
      projectName: 'ar-dk-ps-project2'
      extraProperties: |
        sonar.exclusions=**/lib/**
        sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
        sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/*/coverage.opencover.xml

  - script: dotnet build -c Release
    displayName: dotnet build
    workingDirectory: $(solutionPath)
    
  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: 'test'
      projects: '$(solutionPath)'
      arguments: '-c Release --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover'
      testRunTitle: 'ubuntu'

  - task: SonarCloudAnalyze@1
    displayName: sonarcloud run analysis

  - task: SonarCloudPublish@1
    displayName: publish sonarcloud result
    inputs:
      pollingTimeoutSec: '300'

  - task: PublishCodeCoverageResults@1
    displayName: publish code coverage
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
      failIfCoverageEmpty: true

  - script: dotnet publish -c Release -o ../publish
    displayName: dotnet publish
    workingDirectory: $(solutionPath)